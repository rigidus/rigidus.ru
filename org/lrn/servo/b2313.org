#+STARTUP: showall indent


TCNT
OCR1A

Периуд:
8MHz / (scale_factor * 256) = 50Hz = 20ms

Крайнее левое - 1ms
Крайнее правое - 2ms

// ICR1(TOP) = fclk/(N*f) ; N-Делитель; f-Частота;  1000000/1/50 = 20000
#define ICR_MAX F_CPU/50
#define OCR_MIN ICR_MAX/20
#define OCR_MAX ICR_MAX/10
#define OCR_CENTER (ICR_MAX/4/10)*3

125KHz - тактовая частота таймера
2ms - крайнее положениеЗ
FastPWM


* Цель

Мы хотим собрать устройство, которое может служить таймером выключения
света, предотвращая ситуацию "забыли выключить".

Это учебно-тестовый проект, в котором на примере простой схемы
выключателя с задержкой выключения можно пройти все этапы проектирования
электронного устройства на микроконтроллере.

Требуется собрать устройство, управляемое несколькими (в нашем частном
случае - четырьмя) кнопками по следующему алгоритму:
- В состоянии "выключено" нажатие кнопки приводит к включению нагрузки и
  переходу в состояние "включено"
- В состоянии "включено" нажатие кнопки приводит к выключению нагрузки и
  переходу в состояние "выключено"
- В состоянии "включено" через заданное время устройство самостоятельно
  выключает нагрузку и переходит в состояние "выключено"

В процессе работы появилась идея о том, что устройство может
предупреждать звуковым сигналом о том, что заканчивается время выдержки.

* Порядок работы

Устройство должно отсчитывать время, и одновременно реагировать на
нажатия кнопок, поэтому нам потребуется использовать таймер и прерывания
по его переполнению.

Кроме того нужно независимо обрабатывать нажатия нескольких кнопкок, что
требует решения проблемы "дребезга контактов". Чтобы сделать это, мы
будем анализировать удержание кнопки в некотором интервале времени.

Чтобы воспроизводить звук мы будем использовать второй таймер,
независимый от первого.

В используемом микроконтроллере (Attiny2313) есть два таймера:
- 8-разрядный =Timer-0= (мы будем использовать его для генерации звука)
- 16разрядный =Timer-1= (мы будем использовать его для подавления
  дребезга и отсчета задержек)

* Алгоритм

Чтобы реализовать нужные виды поведения мы будем использовать формализм
=конечных автоматов=. У каждого автомата есть:
- текущее состояние из набора его возможных состояний
- входное воздействие (вход)
- выходное воздействие (выход)
- память

Выходное воздействие одного автомата может быть входным для другого - так
осуществляется связь по данным между автоматами.

Взаимодействующие автоматы связываются в цепочку, где выход предыдущего
автомата является входом следующего по списку:
- автомат подавления дребезга контактов
- автомат отработки временных задержек
- автомат отработки звукового сигнала [TODO:gmm]

Первый в цепочке автомат получает на вход текущее состояние привязанной к
цепочке кнопки, а последний формирует выход, который переключает
привязаную к цепочке нагрузку.

Все цепочки автоматов работают в контексте прерывания 16-разрядного
таймера, а их инициализация должна быть выполнена при старте программы

Поэтому, первое что нам нужно сделать - это блок кода, который формирует
цепочку:


Теперь мы можем построить цепочки, связав каждую цепочку с выводом кнопок
на входе и выводом нагрузки на выходе:

#+NAME: show_led
#+BEGIN_SRC asm :var id="@" led="@"
      ;; &id
      lds     tmp0, BEEP_&id
      cpse    tmp0, r0
      rjmp    1f
      &led_OFF
      rjmp    2f
  1:
      &led_ON
  2:
#+END_SRC

Осталось сформировать переменные каждого из автоматов и код их
инициализации.

* Программа

Программа будет написана для микроконтроллера Attiny2313 на ассемблере
AVR и содержать типичные блоки инициализации, обработчиков прерываний и
главного цикла программы.

Точкой входа можно считать метку =_reset=. Мы попадаем в нее потому что
после подачи питания на микроконтроллер исполнение запускается с нулевого
адреса, а там находится вектор прерывания =Reset-Handler=, который
указывает на метку =_reset=.

После включения питания:
- Проводим инициализацию:
  - Настраиваем таймеры
- В главном цикле:
  - Ничего не деламе
- В обработчике переполнения =Timer-1=
  - Получаем нажатия кнопок
  - Обрабатываем нажатия кнопок
  - Обрабатываем временные интервалы
  - Выдаем звук [TODO:gmm]

Порядок блоков важен, так как после инициализации (reset) мы сразу
"проваливаемся" в =mainloop=.

#+BEGIN_SRC asm :tangle b2313.S :noweb yes :padline no
  ;;; b2313 delay switch for 4 buttons
      <<defines>>

      <<symbols>>

      <<asmmacro>>

      .text
      .global main
  main:

  _vectors:
      <<vectors>>

  <<timer_1_fast_pwm>>

  _timer_0_compare_A:
      <<timer_0_cmp_A>>

  _reset:
  <<initialization>>

      ;; DISABLE TIMER-0
      ;; Временно остановим таймер-0 чтобы не щелкал
      out TCCR0B, r1

  _mainloop:
      rjmp    _mainloop

  _infloop:
      rjmp    _infloop

  <<blink_green>>
#+END_SRC

* Таймеры

Attiny2313 имеет 2 таймера, каждый из которых имеет 4 режима работы. Мы
будем использовать 8-разрядный =Timer-0= для звуковых эффектов, и
16-разрядный =Timer-1= для отсчета времени.

Для того чтобы настроить таймеры в нужные режимы мы дожны записать
правильные значения в их регистры управления.

Один из регистров управления =TIMSK=, который управляет разрешением
прерывний, является общим для обоих таймеров. Поэтому его мы настравиваем
отдельно после инициализации обоих таймеров в подразделе
[[*Настройка прерываний таймеров][Настройка прерываний таймеров]]

Разберем режимы работы таймеров и их управляющие регистры, после чего мы
сможем настроить таймеры в разных режимах.

** Режимы работы таймеров
*** Normal mode

Простейшим режимом работы является =Normal=. В этом режиме частота
тактового генератора проходит через предделитель, который может оставить
ее без изменений, а может уменьшить в 8, 16, 256 или 1024 раза.

Полученное значение частоты каждый тик увеличивает восьмиразрядный
счетный регистр таймера =TCNTn=. Здесь маленькая буква =n=, может
означать =0= или =1= в зависимости от того, какой из таймеров мы
используем.

Когда =TCNTn= переполняется возникает прерывание переполнения таймера,
которую надо специальным образом разрешить.

Процедура обработки прерывания может перезаписать =TCNTn=, если она хочет
сократить время до следующего переполнения, тогда счет начнется не с
нуля, а с записанного значения.

*** Clear Timer on Compare (CTC)

В более сложном режиме =Clear-Timer-on-Compare= (=(CTC)=) значение
счетного регистра =TCNTn= каждый такт сравнивается со значением в
специальном регистре =Output-Compare-Register=.

Мы можем настроить разные действия, которые будут происходить когда
сравнение успешно, например:
- Возникновение прерывания
- Изменения состояния пина микроконтроллера

Для каждого из двух таймеров существует по 2 OCR-регистра (=A= и =B=),
поэтому мы будем именовать их так =OCRnx=, где =N= может быть =0= или
=1=, а =X= - =A= или =B=. Например, регистр =OCR1A=.

В режиме =CTC= счетный регистр будет считать от нуля до значения в
регистре сравнения, потом будет снова сброшен на ноль. Поэтому мы можем
управлять этими интервалами изменя значение регистра сравнения.

Для генерации выходного сигнала на пине микроконтроллера в режиме =CTC=
выход =OC0A= может быть настроен на переключение своего логического
уровня при каждом совпадении. Таким образом можно выводить звук без
необходимости программно переключать биты в портах.

Обработчик прерывания по совпадению (когда он разрешен) может
манипулировать частотой сигнала путем записи в =TCNT0= и =OCR0A=.

*** FastPWM

=FastPWM= режим обеспечивает генерацию ШИМ-сигнала высокой частоты.

Счетчик считает от =BOTTOM= до =TOP=, затем перезапускается снова с
=BOTTOM. =TOP= можно определить как =0xFF= (установив =WGM2:0= = =3=) или
=OCR0A= (установив =WGM2:0= = =7=). Таким образом мы можем изменять
=период=.

Модуль сравнения позволяет генерировать ШИМ-сигнал на пинах =OCnx=. Для
этого у =Compare-Output-Mode= существуют два под-режима: =инвертируеющий=
и =неинвертирующий=.

В неинвертирующем под-режиме пин =Output-Compare= (=OCnx=) обнуляется при
совпадении между =TCNTn= и =OCRnx= и устанавливается в единицу когда
=TCNTn= проходит BOTTOM. Таким образом, изменяя =OCRnx= мы можем изменять
=скважность=. В инвертируещем соответственно все наоборот.

Установка битов =COMnx1:0= = =2= приведет к получению неинвертированного
под-режима, а инвертированный можно получить установив =COMnx1:0= = =3=.

Установка битов =COM0A1:0= = =1= позволяет пину =AC0A= переключаться при
совпадении, если установлен бит =WGM02=. Эта опция недоступна для пина
=OC0B=. Фактическое значение =OC0x= будет наблюдаться на пине только
если в =DDRB= он установлен как output-пин.

Благодаря работе "в одну сторону", рабочая частота в режиме =FastPWN= может
быть в два раза выше, чем в режиме =Phase correct PWM=. Высокая частота
позволяет получить физически небольшие по размеру внешние компоненты
(катушки, конденсаторы) и, следовательно, снижает общую стоимость системы.

Флаг =Timer/Counter Overflow Flag= (=TOVn=) устанавливается каждый раз,
когда счетчик достигает значения =TOP=. Если прерывание включено,
подпрограмма обработчика прерывания может использоваться для обновления
значения сравнения.

Сигнал ШИМ генерируется путем установки (или очистки) регистра OC0x в
момент совпадения между =OCR0x= и =TCNT0= и очистки (или установки)
регистра =OC0x= в тактовом цикле таймера, в котором счетчик очищается
(изменяется с TOP на BOTTOM).

Частота ШИМ для выхода может быть рассчитана по следующему уравнению:

f = f_clk / (scale_factor * 256)

Экстремальные значения для регистра OCR0A представляют особые случаи при
генерации выходного сигнала ШИМ в режиме =FastPWN=. Если значение OCR0A
установлено равным =BOTTOM=, выходной сигнал будет иметь узкий пик каждый
MAX + 1 цикл таймера. Установка =OCR0A= равной =MAX= приведет к постоянно
высокому или низкому выходу (в зависимости от полярности выхода,
установленной COM0A1:0 битами)

Частотный (с коэффициентом заполнения 50%) выходной сигнал в режиме
FastPWM может быть достигнут путем настройки =OC0x= на переключение
своего логического уровня при каждом сопоставлении сравнения (=COM0x1:0=
= =1=). Сгенерированная форма сигнала будет иметь максимальную частоту
f=clk/2, когда OCR0A=0. Эта функция аналогична переключению =OC0A= в
режиме =CTC=, за исключением того, что двойная буферизация
Output-Compare-unit включена в режиме FastPWM.

*** Phase Correct PWM Mode

В режиме =Phase-Correct-PWM= счетчик увеличивается до тех пор, пока
значение счетчика не совпадет с =TOP=.  Когда счетчик достигает =TOP=, он
меняет направление счета. Значение =TCNTn= будет равно =TOP= за один
период таймера. =TOP= можно определить как =0xFF= (=WGM2:0= = =1=) или
=OCR0A= (=WGM2:0= = =5=).

В неинвертирующем =Compare-Output-Mode= пин =Output-Compare= (=OCnx=)
обнуляется на совпадениии между =TCNTn= и =OCRnx= при счете вверх и
устанавливается в единицу на совпадении при счете вниз. В инвертируещем -
наоборот.

Работа "в обе стороны" имеет более низкую максимальную рабочую частоту,
чем "в одну сторону". Однако из-за симметрии двухшаговых режимов ШИМ, эти
режимы предпочтительны для приложений управления двигателями.

Флаг =Timer/Counter Overflow Flag= (=TOVn=) устанавливается каждый раз,
когда счетчик достигает =BOTTOM=. Этот флаг может использоваться для
генерирования прерывания каждый раз, когда это происходит.

Также как и для режима =FastPWM= установка битов =COM0x1:0= = =2=
приведет к получению неинвертированного PWM, а инвертированный вывод
можно получить установив =COM0x1:0= = =3=. Установка битов =COM0A1:0= =
=1= позволяет пину =AC0A= переключаться при совпадении, если установлен
бит =WGM02=. Эта опция недоступна для пина =OC0B=. Фактическое значение
=OC0x= будет видно только на выводе порта, если направление данных для
вывода порта установлено в output.

Частота ШИМ для выхода может быть рассчитана по следующему уравнению:

f = f_clk / (scale_factor * 510)

Экстремальные значения для регистра =OCR0A= представляют собой особые
случаи при генерации выходного сигнала ШИМ в режиме =Phase Correct PWM
Mode=. Если =OCR0A= установлен равным =BOTTOM=, выход будет постоянно
низким, а если установлен равным =MAX=, выход будет постоянно высоким для
неинвертированного режима. Для инвертированного выход будет иметь
противоположные логические значения.

В самом начале периода =OCn= имеет переход от высокого к низкому уровню,
даже если нет сравнения совпадений. Смысл этого перехода состоит в том,
чтобы гарантировать симметрию вокруг BOTTOM. Есть два случая, которые
дают переход без сравнения совпадений:
- =OCR0A= меняет свое значение с =MAX=. Когда значение =OCR0A= равно
  =MAX=, значение вывода =OCn= совпадает с результатом сравнения при
  обратном отсчете. Чтобы обеспечить симметрию вокруг =BOTTOM=, значение
  =OCn= в MAX должно соответствовать результату повышающего сравнения.
- Таймер начинает отсчет со значения, превышающего значение в =OCR0A=, и по
  этой причине пропускает сравнения и, следовательно, изменение =OCn=,
  которое могло бы произойти по пути вверх.

** Регистры управления таймером

Мы рассмотрим регистры управления на примере таймера-0, который часто
используется и имеет 8 разрядов. 16-разрядный таймер незначительно
отличается, но имеет большую сложность, которой можно избежать на первом
этапе.

*** TCCR0A – Timer/Counter Control Register A

|      7 |      6 |      5 |      4 | 3 | 2 |     1 |     0 |
|--------+--------+--------+--------+---+---+-------+-------|
| COM0A1 | COM0A0 | COM0B1 | COM0B0 | – | – | WGM01 | WGM00 |

**** Bits 7:6 – COM0A1:0: Compare Match Output A Mode

Эти биты управляют поведением пина Compare-Match-Output =OC0A=. Если хотя
бы один из них установлен, выход OC0A переопределяет нормальную
функциональность порта пина ввода-вывода, к которому он подключен. Однако
это будет заметно только если соответствующий бит в DDR включит этот пин
на =выход=.

Когда =OC0A= подключен к пину, функции рассматриваемых битов =7:6=
зависят от установки битов =WGM02:0=.

Таблица ниже показывает функциональность битов =7:6= когда =WGM02:0=
выставлены в =Normal= или =CTC= (но не в =FastPWM= или
=Phase-Correct-PWM=, о которых будет ниже еще две таблицы).

| COM0A1 | COM0A0 | Описание                                |
|--------+--------+-----------------------------------------|
|      0 |      0 | OC0A работает как порт в обычном режиме |
|      0 |      1 | Переключить OCOA когда произойдет match |
|      1 |      0 | Очистить OCOA когда произойдет match    |
|      1 |      1 | Установить OCOA когда произойдет match  |


Если же биты =WGM02:0= задают режим =FastPWM=, то функциональность будет
такой:

| COM0A1 | COM0A0 | Описание                                            |
|--------+--------+-----------------------------------------------------|
|      0 |      0 | OC0A disconnected                                   |
|--------+--------+-----------------------------------------------------|
|      0 |      1 | WGM02 = 0: Normal Port Operation, OC0A Disconnected |
|        |        | WGM02 = 1: Toggle OC0A on Compare Match             |
|--------+--------+-----------------------------------------------------|
|      1 |      0 | Clear OC0A on Compare Match, set OC0A at TOP        |
|--------+--------+-----------------------------------------------------|
|      1 |      1 | Set OC0A on Compare Match, clear OC0A at TOP        |
|--------+--------+-----------------------------------------------------|

Особый случай возникает когда =OCR0A= равен TOP и =COM0A1= установлен. В
этом случае Compare-Match игнорируется но установка и очистка делается
когда значение счетчика становится равным TOP.

Наконец, когда биты =WGM02:0= задают режим =Phase-Correct-PWM=:

| COM0A1 | COM0A0 | Описание                                            |
|--------+--------+-----------------------------------------------------|
|      0 |      0 | OC0A disconnected                                   |
|--------+--------+-----------------------------------------------------|
|      0 |      1 | WGM02 = 0: Normal Port Operation, OC0A Disconnected |
|        |        | WGM02 = 1: Toggle OC0A on Compare Match             |
|--------+--------+-----------------------------------------------------|
|      1 |      0 | Clear OC0A on Compare Match when up-counting        |
|        |        | Set OC0A on Compare Match when down-counting        |
|--------+--------+-----------------------------------------------------|
|      1 |      1 | Set OC0A on Compare Match when up-counting          |
|        |        | Clear OC0A on Compare Match when down-counting      |
|--------+--------+-----------------------------------------------------|

1:0 - прямой ШИМ (сброс при совпадении и установка при обнулении счета)
1:1 - обратный ШИМ (сброс при обнулении и установка при совпадении)

**** Bits 5:4 – COM0B1:0: Compare Match Output B Mode

То же самое но для вывода =OC0B= за исключением одного нюанса:

в =Fast-PWM= если биты COM0B1:COM0B1 заданы как "0:1", то это установка ни
к чему не приведет (в таблице указано что это зарезервированное
значение). Аналогия действует и для =Phase-Correct-PWM=.

**** Bits 3, 2 – Res: Reserved Bits
**** Bits 1:0 – WGM01:0: Waveform Generation Mode

В сочетании с битом =WGM02=, из регистра =TCCR0B=, эти биты управляют:
- последовательностью подсчета счетчика,
- источником максимального значения (TOP) счетчика и
- типом генерируемого сигнала, который будет использоваться

#+NAME: wgm_tbl
| WGM2 | WGM1 | WGM0 | Mode     | TOP   | Update of OCRx | TOV Flag |
|------+------+------+----------+-------+----------------+----------|
|    0 |    0 |    0 | Normal   | 0xFF  | Immediate      | MAX      |
|    0 |    0 |    1 | PWM, PC  | 0xFF  | TOP            | BOTTOM   |
|    0 |    1 |    0 | CTC      | OCR0A | Immediate      | MAX      |
|    0 |    1 |    1 | Fast PWM | 0xFF  | TOP            | MAX      |
|    1 |    0 |    0 | Reserved | –     | –              | –        |
|    1 |    0 |    1 | PWM, PC  | OCR0A | TOP            | BOTTOM   |
|    1 |    1 |    0 | Reserved | –     | –              | –        |
|    1 |    1 |    1 | Fast PWM | OCR0A | TOP            | TOP      |

PC = Phase Correct
MAX = 0xFF
BOTTOM = 0x00

*** TCCR0B Timer/Counter Control Register B

|     7 |     6 | 5 | 4 |     3 |    2 |    1 |    0 |
|-------+-------+---+---+-------+------+------+------|
| FOC0A | FOC0B | – | – | WGM02 | CS02 | CS01 | CS00 |

**** Bit 7 – FOC0A: Force Output Compare A

Бит активен только когда WGM-биты задают не-PWM режим. В PWM-режиме
должен быть сброшен в ноль, по соображениям совместимости.

Когда в него записывается логическая единица, немедленно вызывается
=Compare-Match= в =Waveform-Generation-Unit=. Пин =OC0A= переключается в
соответствии с настройкой в битах =COM0A1:0=. NB: Бит =FOC0A= реализован
как строб. Поэтому именно значение, присутствующее в битах =COM0A1:0=
определяет эффект Force-Output-Compare.

Строб =F0C0A= не будет генерировать никаких прерываний и не будет очищать
таймер в режиме =CTC= используя =OCR0A= как TOP.

Бит =FOC0A= всегда читается как ноль.

**** Bit 6 – FOC0B: Force Output Compare B

Аналогично предыдущему

**** Bits 5:4 – Res: Reserved Bits

Reserved

**** Bit 3 – WGM02: Waveform Generation Mode

Этот бит является частью WGM-битов, которые детально описаны в таблице
=wgm_tbl= в разделе [[*TCCR0A – Timer/Counter Control Register A][TCCR0A – Timer/Counter Control Register A]]

**** Bits 2:0 – CS02:0: Clock Select

Эти биты управляют предделителем частоты таймера:

| CS02 | CS01 | CS00 | Description                                       |
|------+------+------+---------------------------------------------------|
|    0 |    0 |    0 | No clock source (Timer/Counter stopped)           |
|    0 |    0 |    1 | clk I/O /(No prescaling)                          |
|    0 |    1 |    0 | clk I/O /8 (From prescaler)                       |
|    0 |    1 |    1 | clk I/O /64 (From prescaler)                      |
|    1 |    0 |    0 | clk I/O /256 (From prescaler)                     |
|    1 |    0 |    1 | clk I/O /1024 (From prescaler)                    |
|    1 |    1 |    0 | External clock source on T0 pin on falling edge.  |
|    1 |    1 |    1 | External clock source on T0 pin on rising edge.   |

*** OCR0A и OCR0B

Содержит 8-бит значения, которое постоянно сравнивается со значением в
регистре счетчика (=TCNT0=). Совпадение может использоваться для
генерации прерывания или генерировать выходной сигнал на пине =OCOA=.

=OCR0B= полностью аналогичен для пина =OCOB=.

*** TIMSK – Timer/Counter Interrupt Mask Register

|     7 |      6 |      5 | 4 |     3 |      2 |     1 |      0 |
|-------+--------+--------+---+-------+--------+-------+--------|
| TOIE1 | OCIE1A | OCIE1B | – | ICIE1 | OCIE0B | TOIE0 | OCIE0A |

**** Bit 0 – OCIE0A: Timer/Counter0 Output Compare Match A Interrupt Enable

Когда бит OCIE0A установлен в единицу, и бит =I= в =Status-Register=
установлен, разрешается прерывание =Compare-Match=.

Оно возникает, если происходит совпадение значения счетчика таймера,
т.е. когда бит =OCF0A= установлен в =TIFR=. 8-битный компаратор
непрерывно сравнивает =TCNT0= с =Output-Compare-Register= (=OCR0A= и
=OCR0B=). Всякий раз, когда =TCNT0= равен =OCR0A= или =OCR0B=, компаратор
сигнализирует о совпадении.

Совпадение установит =Output-Compare-Flag= (=OCF0A= или =OCF0B=) в
следующем тактовом цикле таймера. Если соответствующее прерывание
включено, =Output-Compare-Flag= генерирует прерывание
=Output-Compare-interrupt=.  =Output-Compare-Flag= автоматически
сбрасывается при выполнении прерывания.

**** Bit 1 – TOIE0: Timer/Counter0 Overflow Interrupt Enable

Когда бит =TOIE0= установлен и бит =I= в =Status-Register= установлен,
прерывание =Timer/Counter0-Overflow= разрешается.

Соответствующее прерывание выполняется, если происходит переполнение
счетчика таймера, то есть когда бит =TOV0= установлен в регистре флагов
таймера (=TIFR=).  В режиме =Normal= =TOV0= будет установлен в том же
тактовом цикле таймера, когда =TCNT0= становится равным нулю.

**** Bit 2 – OCIE0B: Timer/Counter0 Output Compare Match B Interrupt Enable

Полностью аналогично биту OCIE0A но для прерывания
=Timer-Counter-Compare-Match-B=

**** Bit 3 – ICIE1: Timer/Counter1, Input Capture Interrupt Enable

Когда этот бит установлен в единицу и установлен флаг =I= в
=Status-Register= прерывание =Timer/Counter1--Input-Capture-interrupt=
разрешено.

Соответствующий вектор прерывания выполняется, если установлен
флаг =ICF1=, расположенный в =TIFR=.

**** Bit 4 – Res: Reserved Bit

**** Bit 5 – OCIE1B: Timer/Counter1, Output Compare B Match Interrupt Enable

Аналог =OCIE0B=

**** Bit 7 – TOIE1: Timer/Counter1, Overflow Interrupt Enable

Аналог =TOIE0=

*** TIFR – Timer/Counter Interrupt Flag Register

|    7 |     6 |     5 | 4 |    3 |     2 |    1 |     0 |
|------+-------+-------+---+------+-------+------+-------|
| TOV1 | OCF1A | OCF1B | – | ICF1 | OCF0B | TOV0 | OCF0A |

**** Bit 0 – OCF0A: Output Compare Flag 0 A

Бит =OCF0A= устанавливается, когда происходит =Compare-Match=
между =Timer/Counter0= и содержимым =OCR0A=.

Он сбрасывается аппаратно при выполнении соответствующего
вектора обработки прерываний (или можно вручную).

Когда бит =I= в =Status-Register=, =OCIE0A=
(=Timer/Counter0-Compare-Match-Interrupt-Enable=), и =OCF0A= установлены,
выполняется прерывание =Timer/Counter0-Compare-Match-Interrupt=.

**** Bit 1 – TOV0: Timer/Counter0 Overflow Flag

Бит =TOV0= устанавливается при переполнении =Timer/Counter0=. =TOV0=
очищается аппаратно при выполнении соответствующего вектора обработки
прерываний (или вручную). Когда бит =I= в =Status-Register=, =TOIE0=
(=Timer/Counter0-Overflow-Interrupt-Enable=) и =TOV0= установлены,
выполняется прерывание =Timer/Counter0-Overflow-interrupt=

**** Bit 2 – OCF0B: Output Compare Flag 0 B

Аналог =OCF0A=

**** Bit 3 - Input Capture Flag

Когда происходит изменение логического уровня (событие) на выводе
=Input-Capture-pin= (=ICP1=) или на выходе аналогового компаратора
=Analog-Comparator-output= (=ACO=), и это изменение подтверждается
настройкой детектора фронта, захват будет инициирован.

Когда происходит захват, 16-битное значение счетчика (=TCNT1=) записывается
в регистр ввода ввода (=ICR1=).

=Input-Capture-Flag= (=ICF1=) устанавливается в том же такте что и значение
=TCNT1=, которое копируется в регистр =ICR1=.

Если включено (ICIE1=1), =Input-Capture-Flag= генерирует прерывание
=Input-Capture-interrupt=.

Флаг =ICF1= автоматически сбрасывается при выполнении прерывания, и может
быть сброшен программно

**** Bit 4 – Res: Reserved Bit

**** Bits 5-6: OCF1A и OCF1B

см аналог =OCF0A=

**** Bit 7: TOV1

см аналог =TOV0=

** Настройка таймера-1 (16-bit) в Normal Mode
:PROPERTIES:
:header-args: :noweb-ref timer_1_normal
:END:

Для отсчета времени мы воспользуемся таймером-1. Так как он
16-разрядный - мы должны использовать специальную процедуру доступа к
16-битным регистрам по 8-битной шине.

Записывать следует сначала старший байт, потом младший.

Считывать следует сначала младший байт, потом старший

Если процедуры обработки прерываний могут осуществлять доступ к этим
регистрам, то на время чтения/записи прерывания следует отключать.

Если запись выполняется в более чем один 16-разрядный регистр за раз и
при этом старший байт одинаков для всех записываемых регистров, то
старший байт можно записать только один раз.

*** TCCR1A

|      7 |      6 |      5 |      4 | 3 | 2 |     1 |     0 |
|--------+--------+--------+--------+---+---+-------+-------|
| COM1A1 | COM1A0 | COM1B1 | COM1B0 | – | – | WGM11 | WGM10 |

Для режима =FastPWM=, в котором TOP задается регистром сравнения OCR1A,
все биты WGM должны быть установлены в единицу (надо не забыть что
биты =WGM12= находится в следующем =TCR1B=).

Мы хотим использовать внешний пин =OC1A= (надо не забыть включить его в
DDR - он соответствует =PB3= (15-ая ножка микроконтроллера). Мы хотим,
чтобы он включался при переходе через TOP и выключался по достижении
значения в регистре сравнения OCR1A. Это соответствует значениям
COM1A1:COM1A0 = =1:0= (прямой PWM).

#+BEGIN_SRC asm
  ;; Fast PWM с очисткой по достижении значения регистра сравнения
  ldi     tmp0, 0b10000011
  out     TCCR1A, tmp0
#+END_SRC

*** TCCR1B

Регистр =TCCR1B= отличается от ранее рассмотренного =TCCR0B= тем, что
4-ый бит теперь не Reserved, а 7 и 6 биты отвечают за захват ввода:


|     7 |     6 | 5 |     4 |     3 |    2 |    1 |    0 |
|-------+-------+---+-------+-------+------+------+------|
| ICNC1 | ICES1 | – | WGM13 | WGM12 | CS12 | CS11 | CS10 |


**** Bit 7 – ICNC1: Input Capture Noise Canceler.

Установка этого бита в лог. 1 активирует входной подавитель шума, при
этом будет фильтроваться входной сигнал =Input Capture Pin=
(=ICP1=). Функция фильтрации требует 4 последовательных одинаковых
значений, поступивших на вывод =ICP1=, чтобы было зарегистрировано
изменение уровня сигнала. Таким образом, захват входных импульсов (Input
Capture) будет задержан на 4 такта генератора микроконтроллера, когда
возможность фильтрации разрешена.

**** Bit 6 – ICES1: Input Capture Edge Select.

Этот бит выбирает тип среза (фронт или спад) на входе =ICP1=, который
вызовет событие захвата импульса. Когда в =ICES1= записан =0=, то спад
вызовет срабатывание триггера, и когда в =ICES1= записан 1, срабатывание
триггера вызовет уже фронт сигнала.

Когда срабатывает триггер захвата события по входу в соответствии с
установкой =ICES1=, значение счетчика (=TCNT1=, регистры =TCNT1H= и
=TCNT1L=) копируется в регистр захвата =Input-Capture-Register=
(=ICR1=). Событие также вызовет установку флага =Input-Capture-Flag=
(=ICF1=), и это может использоваться для срабатывания прерывания
=Input-Capture-Interrupt=, если оно разрешено.

Так как мы не используем захват ввода, то оставляем биты =ICNC1= и
=ICES1= нулевыми.

**** Bit 2:0 – CS12:10: Clock Select. Эти 3 бита задают источник тактового
сигнала для счетчика.

| CS12 | CS11 | CS10 | Описание                                      |
|------+------+------+-----------------------------------------------|
|    0 |    0 |    0 | Источник тактов не задан (таймер остановлен). |
|    0 |    0 |    1 | clkI/O (без делителя частоты)                 |
|    0 |    1 |    0 | clkI/O / 8 (с выхода делителя)                |
|    0 |    1 |    1 | clkI/O / 64 (с выхода делителя)               |
|    1 |    0 |    0 | clkI/O / 256 (с выхода делителя)              |
|    1 |    0 |    1 | clkI/O / 1024 (с выхода делителя)             |
|    1 |    1 |    0 | Внешний сигнал на входе T1 по спаду           |
|    1 |    1 |    1 | Внешний сигнал на входе T1 по фронту          |

Для подсчета импульсов (НЕ наш случай) на входе =T1= можно выбрать
последние 2 варианта в таблице. Если для подсчета выбрана ножка =T1=,
Импульсы будут подсчитываться даже тогда, когда порт T1 настроен как
выход. Эта возможность позволяет программно управлять счетом.

Для наших целей нам нужно только настроить частоту.

Частота внутреннего генератора Attiny2313 - =8MHz=, т.е. 8.000.000 Герц.

По-умолчанию, также может быть включен FUSE-бит делителя частоты на 8
[CKDIV8], это видно из вывода avrdude в момент прошивки:

#+BEGIN_EXAMPLE
  avrdude: safemode: lfuse reads as 64
  avrdude: safemode: hfuse reads as DF
  avrdude: safemode: efuse reads as FF
#+END_EXAMPLE

Бит =CKDIV8= - это 7-ой бит lfuse, который у нас равен 0x64=0b1100100 и
мы видим что он равен единице. Это значит что он НЕ установлен. Если бы
он был равен нулю, микроконтроллер работал бы на частоте 1Mhz.

Если мы будем использовать частоту "как есть", то 16-разрядный счетчик
будет переполняться с частотой 8000000/0xFFFF=15.259 раз в секунду, что
дает нам одно переполнение раз в 0.06554. Этого вполне достаточно для
устранения дребезга контактов.

Если бы =CKDIV8= был бы установлен, то мы бы получали одно переполнение
раз в полсекунды и чтобы сократить этот интервал, в процедуре обработки
прерывания по переполнению пришлось бы записывать в =TCNT1= начальное
значение, чтобы он считал не с нуля.

#+BEGIN_SRC asm
  ;; Выставляем предделитель
  ldi     tmp0, 0b0010
  out     TCCR1B, tmp0
#+END_SRC

*** TCCR1C

Не требует изменений

*** TCNT1H и TCNT1L

Не требует изменений

*** OCR1AH и OCR1AL а также OCR1BH и OCR1BL

Не требует изменений

*** ICR1H and ICR1L – Input Capture Register 1

Не требует изменений

*** TIFR

Не требует изменений

** Настройка таймера-0 (8b-it) в CTC Mode
:PROPERTIES:
:header-args: :noweb-ref timer_0_ctc
:END:

Мы будем использовать таймер-0 для генерации звука. Чтобы получить
возможность изменять его частоту мы воспользуемся режимом CTC - высота
будет регулироваться регистром сравнения.

*** TCCR0A

|      7 |      6 |      5 |      4 | 3 | 2 |     1 |     0 |
|--------+--------+--------+--------+---+---+-------+-------|
| COM0A1 | COM0A0 | COM0B1 | COM0B0 | – | – | WGM01 | WGM00 |

Нам надо:
- =COM0A1:A0= = 0:1 чтобы переключать =OC0A= когда произойдет
  =Compare-Match=
- =WGM01:00= = 1:0 чтобы установить режим =CTC=

#+NAME: timer_ctc_TCCR0A
#+BEGIN_SRC asm
  ;; TCCR0A
  ldi tmp0, 0b01000010
  out TCCR0A, tmp0
#+END_SRC

*** TCCR0B

|     7 |     6 | 5 | 4 |     3 |    2 |    1 |    0 |
|-------+-------+---+---+-------+------+------+------|
| FOC0A | FOC0B | – | – | WGM02 | CS02 | CS01 | CS00 |

Здесь мы хотим настроить частоту.

Для нашего режима бит =WGM02= должен быть сброшен.

Есть вопросы по FOC0A - пока оставлю его нулевым

#+NAME: timer_ctc_TCCR0B
#+BEGIN_SRC asm
  ;; TCCR0B
  ldi tmp0, 0b01
  out TCCR0B, tmp0
#+END_SRC

*** TCNT0

|     7 |     6 | 5 | 4 |     3 |    2 |    1 |    0 |
|-------+-------+---+---+-------+------+------+------|
| FOC0A | FOC0B | – | – | WGM02 | CS02 | CS01 | CS00 |

#+NAME: timer_ctc_TCNT0
#+BEGIN_SRC asm
  ;; Clear TCNT0
  out TCNT0, r0
#+END_SRC

*** OCR0A & OCR0B

#+NAME: timer_ctc_OCR0A_0B
#+BEGIN_SRC asm
  ;; OCR0A & OCR0B
  ldi tmp0, 0xFF
  out OCR0A, tmp0
#+END_SRC

*** TIFR

|    7 |     6 |     5 | 4 |    3 |     2 |    1 |     0 |
|------+-------+-------+---+------+-------+------+-------|
| TOV1 | OCF1A | OCF1B | – | ICF1 | OCF0B | TOV0 | OCF0A |

TIFR-регистр нужно сбросить в 0:

#+NAME: timer_ctc_TIFR
#+BEGIN_SRC asm
  ;; Очищаем флаги прерывания таймера
  out TIFR, r0
#+END_SRC

** Настройка прерываний таймеров

|     7 |      6 |      5 | 4 |     3 |      2 |     1 |      0 |
|-------+--------+--------+---+-------+--------+-------+--------|
| TOIE1 | OCIE1A | OCIE1B | – | ICIE1 | OCIE0B | TOIE0 | OCIE0A |

#+NAME: timer_TIMSK
#+BEGIN_SRC asm
  ;; TOEI1(ovfl-1) & OCIE0A(cmpA-0)
  ldi     tmp0, 0b10000001
  out     TIMSK, tmp0
#+END_SRC

* Вектора прерываний

#+NAME: vectors
#+BEGIN_SRC asm
  rjmp    _reset              ; Reset Handler
  rjmp    _infloop            ; External Interrupt0 Handler
  rjmp    _infloop            ; External Interrupt1 Handler
  rjmp    _infloop            ; Timer1 Capture Handler
  rjmp    _infloop            ; Timer1 CompareA Handler
  rjmp    _timer_1_overflow   ; Timer1 Overflow Handler
  rjmp    _infloop            ; Timer0 Overflow Handler
  rjmp    _infloop            ; USART0 RX Complete Handler
  rjmp    _infloop            ; USART0,UDR Empty Handler
  rjmp    _infloop            ; USART0 TX Complete Handler
  rjmp    _infloop            ; Analog Comparator Handler
  rjmp    _infloop            ; Pin Change Interrupt
  rjmp    _infloop            ; Timer1 Compare B Handler
  rjmp    _timer_0_compare_A  ; Timer0 Compare A Handler
  rjmp    _infloop            ; Timer0 Compare B Handler
  rjmp    _infloop            ; USI Start Handler
  rjmp    _infloop            ; USI Overflow Handler
  rjmp    _infloop            ; EEPROM Ready Handler
  rjmp    _infloop            ; Watchdog Overflow Handler
#+END_SRC

* Прерывание по сравнению таймера-0

#+NAME: timer_0_cmp_A
#+BEGIN_SRC asm
  ;; Записываем freq в регистр сравнения
  out     OCR0A, freq
  reti
#+END_SRC

* Прерывание по переполнению таймера-1

#+NAME: timer_1_fast_pwm
#+BEGIN_SRC asm :noweb yes
  _timer_1_overflow:
      ;; Сохраняем регистры
      push    tmp0
      push    tmp1
      ;; Сохраняем регистр флагов
      in      tmp0, SREG
      push    tmp0
      ;; Сохраняем индексные регистры
      push    xl
      push    xh
      push    yl
      push    yh
      push    zl
      push    zh

      ;; [[[=== Высота звука ===]]]
      ;; Уменьшаем freq для частоты buzzer-а
      dec     freq
  ;;     cpi     freq, END_FREQ
  ;;     brsh    1f                  ; Перейти если больше или равно
  ;;     ldi     freq, START_FREQ
  ;; 1:

      ;; [[[=== Мигание зеленым светодиодом ===]]]
      ;; Переключим состояние зеленого светодиода
      rcall   _blink_green

  <<chains>>

      ;; Ускорим процесс:
      ;; Set TCNT1 to 0xE000
      ldi     tmp0, 0x00
      ldi     tmp1, 0xE0
      out     TCNT1H, tmp1
      out     TCNT1L, tmp0

  _timer_0_overflow_ret:
      ;; Восстанавливаем индексные регистры
      pop     zh
      pop     zl
      pop     yh
      pop     yl
      pop     xh
      pop     xl
      ;; Восстанавливаем регистр флагов
      pop     tmp0
      out     SREG, tmp0
      ;; Восстанавливем регистры
      pop     tmp1
      pop     tmp0
      ;; Выходим
      reti
#+END_SRC

* Инициализация

До окончания инициализации прерывания должны быть запрещены:

#+NAME: initialization
#+BEGIN_SRC asm :noweb yes :padline no
  _init:
      ;; Выделяем регистр r0 под значение нуля и r1 под значение единицы
      clr     r0
      mov     r1, r0
      inc     r1

      ;; Запретить прерывания
      out     SREG, r0

      ;; Настроить Stack
      <<init_stack>>

      ;; Инициализируем выводы
  <<init_pins>>

      ;; Инициализация таймера-1
      <<timer_1_normal>>

      ;; Инициализация таймера-0
      <<timer_0_ctc>>

      ;; Настройка прерываний таймеров
      <<timer_TIMSK>>

      ;; Начальное значение
      ldi     freq, START_FREQ

      ;; Разрешить прерывания
      sei

#+END_SRC

Первым делом настроим стек:

#+NAME: init_stack
#+BEGIN_SRC asm
  ldi     tmp0, RAMEND
  out     SPL, tmp0
#+END_SRC

Потом настроим порты на вход и выход:

#+NAME: init_pins
#+BEGIN_SRC asm :noweb yes
  _init_pins:
      ;; Настроить PB7:PB0 на выход
      ;;              76543210
      ldi     tmp0, 0b11111111
      out     DDRB, tmp0
      ;; Настроить на выход
      ;; BLUE:pd1, WHITE:pd0,
      ;; OUT-IP:pd4, OUT-PP:pd5
      ;; OUT-PM:pd6
      ;; остальные - на вход
      ;;              76543210
      ldi     tmp0, 0b01110011
      out     DDRD, tmp0
      ;; Настроить A1

#+END_SRC

* Мигание светодиодом

#+NAME: blink_green
#+BEGIN_SRC asm
  _blink_green:
      sbic    PORTB, 1
      rjmp    _bg_clean
      sbi     PORTB, 1
  _bg_ret:
      ret
  _bg_clean:
      cbi     PORTB, 1
      rjmp    _bg_ret
#+END_SRC

* Константы

Нам нужны:
- минимум два временных регистра
- счетчик

#+NAME: defines
#+BEGIN_SRC asm
  #define TRUE 1
  #define FALSE 0
  #define MAX 2
  #define result r16
  #define tmp0 r17
  #define tmp1 r18
  #define freq r19

  #defune FCPU 8000000
  #define ICR_MAX F_CPU/50
  #define OCR_MIN ICR_MAX/20
  #define OCR_MAX ICR_MAX/10
  #define OCR_CENTER (ICR_MAX/4/10)*3

  .equ DELAY_MAX, 0x0200
  .equ SIGNAL_TIME, 0x0010
  .equ START_FREQ, 0xAF
  .equ END_FREQ, 0x7F
#+END_SRC

* Схема

#+BEGIN_EXAMPLE
                +-------------------------+
                |                         |
              +-------------------------+ | +---[RED]:pb3------------+
              | |                       | | | +-[YELLOW]:pb4---------+
            +-------------------------+ | | | | +-[BUZZER]:(OC0A)pb2-+
            | | | +------+            | | | | | | +-[LED-GREEN]:pb1--+
            v v v v      |  +--vcc--+ | | | | | | | +---OUT-SP:pb0---+
  /=+=+=+=+=+=+=+=+=+=   |  |       | | | | | | | | | +-OUT-PM:pd6---+
  |     ^ ^ ^ ^ ^ ^  /   |  |       v v v v v v v v v v              |
  |     | | | | | |  \   |  |   /===+=+=+=+=o=o=o=o=o=o===\          |
  | aref+ | | | | |  /   |  |   |   ^ ^ ^ ^               |          |
  |    gnd+ | | | |  \   |  |   |   | | | |               |          |
  |     (13)+ | | |  /   |  |   |vcc+ | | |               |          |
  |       (12)+ | |  \   |  |   |  sck+ | |               |          |
  |         (11)+ |  /   |  |   |   miso+ |               |          |
  |           (10)+  \   |  |   |     mosi+               |          |
  |                  /   |  |   |                         |          |
  |                  \   |  |   |                         |          |
  |                  /   |  |   |                         |          |
  |        (gnd)+    \   |  |   |                         |          |
  |      (gnd)+ |    /   |  |   |      IN-PM:pd3+         |          |
  |     (5v)+ | |    \   |  |   |    IN-SP:pd2+ |         |          |
  | (3.3v)+ | | |    /   |  |   |  IN-PP:pa0+ | |         |          |
  |reset+ | | | |    \   |  |   |IN-IP:pa1+ | | |         |          |
  |     | | | | |    /   |  |   |         | | | |     +gnd|          |
  |     v v v v v    \   |  |   |         | | | |     |   |          |
  \=+=+=+=+=+=+=+=+=+=   |  |   |         V V V V     v   |          |
        ^   ^ ^ ^        |  |   \===+=O=O=I=I=I=I=o=o=+===/          |
        |   | | |        |  |       ^ ^ ^         ^ ^ ^              |
        |   +------vcc------+       | | |         | | |              |
        |     | |        |    reset | | |OUT-IP:pd4 | |              |
        +[10]-|-+        +----------+ | |  OUT-PP:pd5 |              |
         [uF] +------------------------------>gnd-----+--------------+
                                      | |
                                      | +[BLUE]:pd1
                                      +[WHITE]:pd0
#+END_EXAMPLE

* Символические имена

Необходимые символические имена взяты из даташита
[[file:attiny2313datasheet.pdf][attiny2313datasheet]]

#+NAME: symbols
#+BEGIN_SRC asm
  .equ SPL, 0x3D
  .equ SREG, 0x3F
  .equ RAMEND, 0xDF
  .equ DDRA, 0x1A
  .equ DDRB, 0x17
  .equ DDRD, 0x11
  .equ PORTA, 0x1B
  .equ PORTB, 0x18
  .equ PORTD, 0x12
  .equ PINA, 0x19
  .equ PINB, 0x16
  .equ PIND, 0x10
  .equ TCCR0A, 0x30
  .equ TCCR0B, 0x33
  .equ TCCR1B, 0x2E
  .equ OCR0A, 0x36
  .equ OCR0B, 0x3C
  .equ TCNT0, 0x32
  .equ TCNT1H, 0x2D
  .equ TCNT1L, 0x2C
  .equ TIFR, 0x38
  .equ TIMSK, 0x39
#+END_SRC
