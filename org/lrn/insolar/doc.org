#+STARTUP: showall indent hidestars

* Disclaimer

Этот документ создан как набор заметок, которые могут помочь (а могут и
помешать) разобраться в основных концепциях проекта Insolar.

Он может содержать фактические ошибки, неточности и даже прямую ложь в
отношении технических концепций, намерений разработчиков, сроков
реализации и сценариев использования. Используйте на свой страх и риск.

я выкладываю его в свой частный репозиторий для целей совместного
редактирования, чтобы любое заинтересованное лицо могло вносить свои
уточнения.

Все написанное может не совпадать с позицией компании Insolar и является
частным мнением (или заблуждением) автора или контрибьюторов

* Overview

**

С чего начинать discovering проекта?

Где искать данные?

* Структура

Из чего состоит Insolar:
- Platform Core
  - Network
    - Infrastructure Layer
    - Nodes
    - Pulses
    - Consensus
  - Ledger
    - Lifelines / sidelines - Последовательности записей, представляющих
      состояния объектов, которые создаются умными контрактами
    - jets / jet drops - логические единицы хранения, сформированные из lifelines
    - short/long term storage (for jets)
  - VM
  - Platform API
    - Smart Contracts API
    - Business Logic API
    - Observer API
  - Observer
- Business Foundations
  - Domains (supercontract)
    - Domain Rules
  - Toolkuts
- Applications
- External Services

* Принципы

- Everything is SmartContract
- One Executor - Many Validators
- Dynamic consensus: separation of network (nodes) and business
  (contracts) consensuses
- Use different blockchain styles to fit for purpose: one object-one
  chain for object’s lifeline and sidelines, sharded chains for block
  building, block-based chains for storage units
- Different roles (players) in the Insolar Ecosystem: resource providers,
  application developers, application consumers, Insolar
  Foundation. Different incentives & staking & liabilities

* Core:Network
** Node roles
** Pulses
** Consensus (Optimized BFT)
* Core:Ledger
** LightMaterial
** HeavyMaterial
* Core:VM
** Model One Executor - Many Validators
** VM
** Contracts
** Requests
* Core:Platform-API
* Core:Observer
* Business-Foundation
** Domains
** Toolkits
* Applications


* С чего начать объяснять
** С кейсов
** С обсервера и платформы (набора нод)
*** Collector
*** DB
*** API
** Дальше можно про роли нод (хранение и исполнение)

В данный момент в майнете может быть только один Heavy. Остальных сколько
угодно, но у нас пока по пять

Статические роли:
- Virtual (SmartContract Executor)
- LM
- HS
- Pulse

Динамические роли
- Executor
- Validator

По insolar-addr вычисляется Virtual Executor (VE) выбираемый из
ActiveList (динамический). ActiveList зависит от пульса - он формируется
на каждoм пульсе.

Пульс рассылается всем соседям

Отсюда мы переходим к объяснению консенсуса, но сначала:


** What is insolar-addr
** What is pulse

10 second таймслоты

На каждом пульсе:
- отправляется энтропия

*** Смена пульса

Все сложно

Jet-drops


** Consensus

4 фазы

** Discovery

На сетевом уровне

Список захардкожен в коде ноды

Как происходит добавление узлов - через дискавери
Как происходит удаление нод - она перестает отвечать на пульс или
убивается за злонамеренное поведение (еще возможны сценарии)

** Jet

Пусть у нас есть пространство контрактов 2^64 адресов
Если LME видит что данных для сохранения слишком много, то мы делим эти
данные пополам - это Jet.

** Доступ к данным

** Реквест

2 способа сформировать реквест

- из внешнего апи - запрос к кошельку
- запрос на перевод - от одной ноды к другой во время исполнения
  контракта

Реквесты сейвятся, и выполняются. Если реквест не выполнился, то его
довыполнят при этом порядок гарантируется

Транзакционный механизм

** Смартконтракт

это Go-класс, в котором есть поля, и эти поля хранятся на блокчейне как
связный список состояний - его вершина - текущая состояние

** Механизм валидации

сейчас нет.
