#+STARTUP: showall indent hidestars

* Apollo

Функциональный хоббийный компьютер, построенный по принципам бортового
управляющего компьютера космической программы "Аполлон" - Apollo Guidance
Computer на базе микроконтроллера ATMEGA328, 7-сегментных индикаторов и
клавиатуры от калькулятора.

* Original Specs

** Architecture

Хэлу Лейнингу (Hal Laning) сначала пришлось разбираться, как организовать
многочисленные функции ПО, чтобы они выполнялись практически одновременно
в реальном времени на бортовом компьютере космического аппарата, имеющем
ограниченные размер и быстродействие.

Архитектура Хэла позволила избежать подводных камней, свойственных
операционной системе, в которой вычисления должны быть четко разделены
между временными отрезками.

Лейнинг разработал систему, в которой программные функции распределяются
в виде «задач», которые могут быть любого размера, который потребуется
для выполнения этих функций. Каждой задаче назначается
приоритет. Операционная система всегда выполняет задачу с наибольшим
приоритетом. Если выполняется задача с низким приоритетом, и в это время
назначается задача с высоким приоритетом, то задача с низким приоритетом
будет приостановлена, пока не закончится задача с высоким приоритетом.

Executive (операционная система реального времени AGC и
LGC. прим. перев.) организовывала выполнение задач таким образом, что
каждая задача сохраняла своё состояние в виде набора регистров, и
состояние сохранялось, пока выполняется задача с большим приоритетом. LGC
содержит массив из восьми наборов по 12 регистров каждый, по 15 бит в
регистре. Набор регистров такого размера достаточен для выполнения
множества задач, но задачи, использующие интерпретатор (встроенный
интерпретирующий язык для задач, оперирующих с числами двойной
точности. прим. перев.) для выполнения векторных и матричных вычислений,
требуют больше места. Для таких задач выделяется отдельный массив из 43
регистров. LGC содержит пять таких массивов (Vector Accumulator, VAC).

Функции, выполняющиеся последовательно одна за другой, объединялись в
одну задачу. Большая задача SERVICER была активна в течение всей фазы
посадки и других фаз полёта с включенным двигателем, и она включала в
себя навигацию с использованием акселерометров, уравнения движения,
управление дроссельной заслонкой двигателя, вывод данных о положении
корабля, вывод других данных на дисплей, и каждая функция использовала
выходные данные предыдущих.

Количество доступных регистровых массивов и VAC ограничивает количество
задач, которые могут стоять в очереди на исполнение восемью, из которых
до пяти могут использовать массивы VAC. При нормальной работе, количество
запущенных задач остаётся постоянным, хотя задачи, запущенные для
однократного исполнения, или асинхронным образом, могут вызывать
флуктуации загрузки системы.

Однако, если количество запущенных задач больше, чем завершённых,
количество использованных регистровых массивов и VAC растёт. Если эта
ситуация продолжается достаточно долго, то их количество иссякает, и
запрос на запуск следующей задачи не может быть удовлетворён.

Вернёмся на год раньше, до запуска Аполлона 11, когда мы,
инженеры-программисты, думали, что у нас и так достаточно дел, и от нас
требуют написать ПО для посадки на Луну таким образом, что может быть в
буквальном смысле отключен и включен обратно без прерывания процесса
посадки и иных жизненно важных манёвров! Это называлось «защитой от
рестарта». Помимо помех по питанию, и другие факторы могут вызвать
рестарт системы. Рестарт происходит, если железо думает, что программа
зависла в бесконечном цикле, или если произошла ошибка чётности при
чтении ПЗУ, или ещё по нескольким другим причинам.

Защита от рестарта была реализована при помощи регистрации «путевых
точек» в подходящих точках программы, расставленных таким образом, что
возврат к последней «путевой точке» не вызывал ошибку, как показано в
следующем примере:

NEW_X = X + 1
регистрация путевой точки
X = NEW_X

Очевидно, что без регистрации путевой точки выполнение этого кода второй
раз вызовет повторный инкремент X.

После рестарта такая программа возобновляет свою работу. Каждая задача
начинает работу с последней зарегистрированной путевой точки. если
несколько копий одной и той же задачи находились в очереди,
возобновляется только последняя. Некоторые задачи не имеют статус
жизненно важных, и не защищены от рестарта. Они просто исчезают.

Защита от рестарта работала очень хорошо. На панели управления нашего
гибридного симулятора в Кембридже была кнопка, вызывающая рестарт
AGC. При тестировании ПО мы иногда нажимали эту кнопку в случайные
моменты времени, почти надеясь, что сбой приведёт нас к ещё одному
багу. Неизменно, каждый раз срабатывала защита от рестарта, и работа
продолжалась без остановки.

Не только железо могло вызвать рестарт, он мог быть вызван программно,
если программа достигала точки, в которой компьютер не знал, как
продолжить выполнение программы. Это происходило при передаче управления
по метке BAILOUT в модуле «Alarms and Aborts». Вызов сопровождался кодом
ошибки.

Эти действия выполнялись системой Executive, если ресурсы исчерпаны. Если
задача не может быть поставлена на выполнение из-за того, что нет
свободных массивов для сохранения регистров, Executive вызывал BAILOUT с
кодом ошибки 1202. Если не было свободного VAC, то вызывался BAILOUT с
кодом 1201.

Не все функции, выполняемые в LGC выполнялись как «задачи». Помимо них,
были аппаратные прерывания, которые могли возникнуть в любой момент (если
не были в явном виде запрещены), которые выполняли высокоприоритетные
функции, прерывания были назначены определённым устройствам, включая
цифровой автопилот, «uplink» и «downlink» (устройство приёма и передачи
данных по радиоканалу с Землёй. прим. перев.) и клавиатуре.

Другие прерывания могли быть использованы для выполнения кусков кода,
которые должны быть выполнены в определённое время. Такие функции
назывались «задания» (tasks), и их планирование происходило в
подпрограмме, называемой WAITLIST. «Задания» должны были иметь очень
маленькое время выполнения.

В то время, как «задачи» (jobs) планировались для выполнения с
определённым приоритетом, «задания» (tasks) планировались для запуска в
определённое время. Задания и задачи часто использовались
совместно. Задание могло быть запущено для считывания показаний датчика,
которые должны быть считаны в строго определённое время, и задание, в
свою очередь, запускало задачу с определённым приоритетом для обработки
этих показаний.

** DSKY

DSKY был главным человеко-машинным интерфейсом для LGC. Для дисплея,
который имел три регистра общего назначения, каждый из которых хранил
знаковое число длиной пять десятичных разрядов, три регистра по две
десятичных цифры для индикации текущей фазы полёта (числа от 63 до 68 для
посадки на Луну), а также «глагол» и «существительное». Глаголы и
существительные нужны для примитивного языка коммуникации между командой
и компьютером. Фаза полёта и комбинация глагол/существительное в
некоторых случаях задаются программой, а в других случаях вводятся с
клавиатуры с 19 клавишами. Содержание трёх регистров общего назначения
зависит от введённого существительного и глагола. DSKY также содержит
массив индикаторных лампочек, которые управляются компьютером, и
индикаторов активности компьютера, которые зажигаются, когда LGC не
находится в состоянии ожидания.

** Interpreter

Компьютер AGC в лунном модуле и в командном модуле программировался на
двух языках. Один, который мы называли «Basic», или более правильно
«Yul», был ассемблером, имеющим около 40 команд [6], за авторством Хью
Блэра-Смита (Hugh Blair-Smith). Вторым был интерпретатор,
интерпретирующий язык (по сути, набор подпрограмм), разработанный для
упрощения навигационных вычислений, включающих вектора и матрицы чисел
двойной точности (30-битные числа с фиксированной точкой), но очень
медленный. «The Interpreter» был написан Чарьзом Мюнтцом (Charles Muntz).

** Input

Стандартной процедурой ввода команды в DSKY является последовательность:
VERB-DIGIT-DIGIT, NOUN-DIGIT-DIGIT и ENTR. Это отражает идеологию
взаимодействия пользователя с AGC: вводится глагол (VERB), и номер
действия, которое нужно сделать, и существительное (NOUN), также
кодируемое номером, которое указывает объект, на который направлено
действие. Список кодов глаголов и существительных содержится в инструкции

Нажатие кнопки VERB на клавиатуре очищает индикатор VERB. Затем астронавт
вводит две цифры, которые интерпретируются как номер глагола, затем то же
самое делается с существительным (NOUN). До тех пор, пока кнопка ENTR не
нажата, коды можно исправить повторением ввода NOUN или VERB. После
нажатия ENTR каждые 1.5 секунды мигают цифры на индикаторах VERB и NOUN,
это означает, что оператор должен ввести данные, зависящие от
операции. После этого начинается выполнение операции.

Данные могут вводиться в восьмеричной и десятичной форме. Компьютер
считает, что если знак "+" или "-" не введён, то данные будут в
восьмеричной форме. Если при вводе восьмиричного числа нажать кнопки 8
или 9, будет мигать индикатор OPR ERR. Если нажаты клавиши "+" или "-",
то соответствующий знак появляется на дисплее, означая, что компьютер
готов к приёму десятичного числа. Если оператор ошибся, он может нажать
на клавишу CLR и повторить ввод. Нажатие на ENTR завершает ввод. Для
сброса сигнала OPR ERR и возврата в режим ввода используется кнопка RSET.

Кнопка RSET используется для гашения всех предупреждающих сигналов: TEMP,
GIMBAL LOCK, PROG, RESTART и TRACKER. Это может быть полезно для того,
чтобы выяснить, был ли предупреждающий сигнал кратковременным или
вызвавшая его ошибка присутствует в данный момент.

** Timers and Multitasking

- (T3) Wait list — инкремент каждые 10 мс., сдвинут относительно T4RUPT
  на 5 мс
- (T4) T4RUPT — инкремент каждые 10 мс.
- (T5) Автопилот — инкремент каждые 100 мс.
- (T6) часы высокого разрешения — инкремент каждые 1/1600 с = 0.625 мс.

Первый таймер, T3, нужен для работы переключателя задач (Wait list). Wait
list — это список из очень коротких задач, каждая из которых занимает
маленькое время, и может быть выполена непосредственно в обработчике
прерывания. Список содержит до семи задач, каждая из которых запускается
с определённым интервалом. Время выполнения задачи строго ограничено 4
мс. За это время компьютер успевает выполнить около 160 инструкций.

Таймер T4 запускает критические периодические задачи, имеющие интервал от
20 до 120 мс, включающие в себя обмен данными с DSKY, опрос
переключателей на панелях управления кораблём и другие задачи.

** INLINK

(канал передачи телеметрии)

Устройство INLINK обеспечивает двустороннюю связь с Землёй, и служит для
передачи телеметрической информации и приёма данных от центра управления
полётами. Астронавты могут вводить необходимые для полёта данные через
DSKY, но это процесс медленный и чреватый ошибками. Через регистр INLINK
данные могут вводиться с Земли напрямую в компьютер.

** Прерывания

- Startup - Стартовый адрес после подачи питания AGC
- T6RUPT - TIME6 достиг 0. Таймер используется автопилотом.
- T5RUPT - TIME5 достиг переполнения. Таймер используется автопилотом.
- T3RUPT - TIME3 достиг переполнения. Используется планировщиком задач WAITLIST.
- T4RUPT - TIME4 достиг переполнения. Опрос и и обновление индикации DSKY
- KEYRUPT1 - Нажате кнопки DSKY. Код нажатой клавиши с главного DSKY доступен в канале 15
- KEYRUPT2 - Нажате кнопки второго DSKY. Код клавиши навигационного DSKY доступен в канале 16 (только в командном модуле)
- UPRUPT - Данные в регистре INLINK. Используется для DSKY
- DOWNRUPT - Регистр Downlink содержит данные. Используется для телеметрии AGC
- RADARUPT - Данные в регистре RNRAD. Данные от радара сближения
- RUPT10 - LM P64

** Периферия и ввод-вывод

Периферийными устройствами AGC являются инерциальная платформа,
двигатели, радар, DSKY и переключатели на панели управления.

Для ввода и вывода служат так называемые каналы. Запись и чтение канала
происходит сходно с записью и чтением ячейки ОЗУ, но в отличте от ОЗУ,
большинство каналов однонаправлены. Также есть порты-счётчики, которые
служат для считывания положений осей IMU, радара и секстанта. Импульсы от
датчиков углов инкрементируют и декрементируют счётчики, которые затем
могут быть считаны AGC.

DSKY посылает коды клавиш длиной 5 бит. Нажатие кнопки на DSKY генерирует
прерывание KEYRUPT, код при этом помещается во входной канал.

Ещё один пример, когда необходима передача большого количества данных
через порт, это интерфейсы uplink и downlink, обеспечивающие связь с
Землёй на скорости 51 кбит/c или 1900 бит/с (выбирается вручную
экипажем).

** Use cases

Более поздние миссии были организованы более гибко и первое зажигание DPS
проводилось на шаге P40 программы. (Более подробно программу полёта можно
посмотреть тут. прим. перев.) LM маневрирует в положение
поджига. Компьютер начинает обратный отсчёт до зажигания. На 30-й секунде
задача READACCS выполняется первый раз. Она читает показания
акселерометров в инерциальном модуле космического корабля, ставит на
исполнение задачу SERVICER, которая начинает выполняться немедленно, и
ставит на исполнение саму себя с задержкой в 2 секунды. Она
инициализируется вектором состояния от программы орбитальной интеграции,
и навигационные уравнения начинают использовать данные акселерометров для
вычисления положения и векторов ускорения. READACCS и SERVICER
запускаются каждые две секунды в течение всей фазы полёта с включенным
двигателем.

Команда набрала на компьютере «глагол 37», что означало фазу P63,
подготовку к управляемому снижению, и оставалась пока в командном модуле,
пока прожиг двигателя не завершён. Компьютер выполнял алгоритм,
рассчитывающий точное время зажигания, и положение, в котором должен быть
лунный модуль в этот момент. Далее космический корабль разворачивается в
нужное положение. В момент зажигания, сопло двигателя должно быть
направлено почти вперёд, против вектора орбитальной скорости корабля.

Управление передаётся программе BURNBABY — главная программа управления
зажиганием, которую мы написали после LM-1, чтобы сэкономить память путём
использования сходных алгоритмов в период, предшествующий зажиганию. На
DSKY высвечивается «Глагол 6, существительное 62». Средний регистр
содержит время в минутах и секундах, начинается обратный отсчёт до
зажигания. За 35 секунд дисплей гаснет, за 30 зажигается снова. Это
сигнал того, что стартовал алгоритм «Average-G». За 7,5 с начинается
«грязный» прожиг. За 5 секунд до старта дисплей мигает, ожидая стартовой
команды от экипажа. Баз Олдрин (Buzz Aldrin), пилот лунного модуля, стоит
справа от кокпита, на нём лежит главная ответственность по работе с
DSKY. Он нажимает «PROCEED».

В момент времени 102:33:05 от начала миссии самовоспламеняющееся топливо
поступает в двигатель посадки зажигается при дросселировании
10%. Армстронг не почувствовал даже лёгкого толчка — ускорение было
меньше 1/25g. Дисплей высветил «существительное 63» и три дисплея
регистров сейчас показывают полную скорость 5559.7 футов/с, и
вертикальную скорость -2.2 фута/с, высоту над поверхностью 49971 футов
[8].

Примерно через пять минут после зажигания Олдрин ввёл «глагол 16,
существительное 68» — запрос на отображение «существительного», при
котором третий регистр показывал разность между высотой, которую видит
радар, и вычисленной компьютером. Эта переменная, называемая DELTAH, была
около -2900 футов.

Затем мы услышали слова «программное предупреждение». В кембридже мы
переглянулись. На борту космического корабля, Олдрин увидел, как зажёгся
сигнал «PROG» и дисплей высветил снова «глагол 6, существительное 63». Он
быстро нажал «глагол 5 существительное 9». На дисплее DSKY появился код
предупреждения 1202. Это предупреждение появлялось, если компьютер
перегружен, т.е. запущено больше задач, чем на них хватит времени. В
Кэмбридже сказали: «предупреждение исполнения, нет места в памяти».

Между возникновением сигнала ошибки и ответом «продолжать» из Хьюстона
прошло полминуты. За это время центр управления полётом проверил величину
DELTAH, и Олдрин набрал «57», код, разрешающий системе навигации принять
данные радара. Затем он попробовал набрать «глагол 16, существительное
68» снова и увидел, как DELTAH уменьшилось до 900 футов.

Время миссии 102:41:32, корабль преодолел отметку 7400 футов, снижаясь со
скоростью 125 футов/с, «высокие ворота» были достигнуты. Навигационная
система сейчас должна выполнять другие задачи. Лунный модуль направлен
вперёд, так, что лунная поверхность видна по курсу. На DSKY регистр
режима показывал 64, что означало «фазу видимости», и «существительное
64» сменилось на «существительное 63». Вместо скорости в верхнем регистре
сейчас отображались два двузначных числа. Одно из них — обозначение точки
посадки (landing point designator, LPD), угол, который указывает, на
какую метку разметки на окне Армстронг должен смотреть, чтобы увидеть,
куда сядет корабль, если будет разрешена автоматическая посадка.

Время миссии 102:42:17, происходит ошибка 1201. Снова ошибка Executive
(Системное ПО компьютера состояло из двух подсистем: Executive — ОС
реального времени и The Interpreter — виртуальная машина, фактически
интерпретатор команд для работы с числами двойной точности. прим. перев.)
— нет свободной памяти. Через приблизительно 24 секунды снова
ошибка 1202. Центр управления в Хьюстоне говорит «продолжать» в обоих
случаях.
* Components
** 4-digits 7-segment indicator 5461AS-1
*** pinout

#+BEGIN_SRC ditaa :file 4dig7seg-pinout
          d1   as   fs    d2   d3  bs
           |    |    |    |    |    |
  +--------------------------------------------+
  |    d1           d2         d3         d4   |
  |                                            |
  |   ~~as~~     ~~~~~~     ~~~~~~     ~~~~~~  |
  |  fs  bs     /     /    /     /    /     /  |
  |  ~~gs~~     ~~~~~~     ~~~~~~     ~~~~~~   |
  | es  cs     /     /    /     /    /     /   |
  | ~~ds~~ dps ~~~~~~  o  ~~~~~~  o  ~~~~~~  o |
  |                                            |
  +--------------------------------------------+
           |    |    |     |    |    |
          es   ds   dps   cs   gs   d4
#+END_SRC

** MAX7219 dot matrix module based MAX7118CNG

*** pinout

#+BEGIN_SRC ditaa :file max7219-pinout
          gs   fs   d2   d4   dps  es   cs   d1
           |    |    |    |    |    |    |    |
  +--------------------------------------------+
  |                                            |
  |                                            |
  |                                            |
  |                                            |
  |                                            |
  |                                            |
  |                                            |
  |                                            |
  +--------------------------------------------+
           |    |    |    |    |    |    |    |
         (d5) (d7)  as   bs  (d8)  ds (d6)   d3

#+END_SRC
